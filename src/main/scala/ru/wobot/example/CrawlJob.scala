package ru.wobot.example

import java.util.concurrent.TimeUnit

import org.apache.flink.api.java.utils.ParameterTool
import org.apache.flink.api.scala._
import org.apache.flink.core.fs.FileSystem.WriteMode
import org.apache.flink.streaming.api.scala.{DataStream, StreamExecutionEnvironment}
import org.apache.flink.streaming.api.windowing.windows.GlobalWindow
import org.apache.flink.util.Collector
import ru.wobot.net.Fetcher
import ru.wobot.net.Fetcher.Fetch

import scala.concurrent.{Await, Future}
import scala.concurrent.duration.{Duration, DurationInt}
import scala.concurrent.ExecutionContext.Implicits.global

object BatchFetchJob {
  def main(args: Array[String]) {
    val env = StreamExecutionEnvironment.getExecutionEnvironment
    val params = ParameterTool.fromArgs(args)

    val userIds: DataStream[Long] = env.fromElements(2, 5, 6, 7, 12, 20, 21, 22, 23, 34, 37, 42, 45, 46, 54, 57, 59, 61, 133, 169, 173, 175, 180, 182, 187, 190, 193, 194, 198, 199, 201, 230, 231, 234, 237, 254, 277, 287, 288, 316, 326, 334, 341, 345, 358, 366, 369, 373, 467, 469, 517, 701, 702, 713, 799, 907, 952, 980, 1037, 1057, 1228, 1439, 1634, 2050, 2491, 2745, 2791, 2807, 2860, 2943, 3148, 3420, 3458, 3520, 3637, 4016, 4231, 4596, 4766, 4781, 4923, 5202, 5333, 5524, 5634, 6010, 6099, 6413, 6492, 6921, 7146, 7176, 7830, 7990, 8512, 9021, 9256, 10258, 10697, 10741, 10956, 11191, 12353, 13033, 13319, 13557, 13780, 14099, 14162, 14185, 14461, 15221, 15460, 15496, 15740, 16990, 18465, 20768, 21513, 21980, 22802, 23363, 24613, 25568, 26047, 26615, 28078, 29195, 33461, 33723, 34028, 35345, 35890, 36419, 36555, 37831, 41005, 43857, 46520, 49309, 49589, 50030, 52946, 54602, 54678, 55180, 56571, 59628, 61399, 62177, 64081, 66559, 66748, 72068, 72213, 73311, 74141, 75103, 76269, 77361, 77777, 79288, 83813, 85659, 88111, 88324, 89705, 93388, 93588, 94627, 95602, 97287, 97979, 99756, 99797, 100172, 100534, 103989, 116191, 118099, 122376, 127249, 128601, 136722, 139650, 141692, 141853, 143733, 143986, 146891, 153796, 160319, 171420, 172823, 175395, 180083, 184760, 185089, 189002, 189576, 189814, 190353, 196554, 209903, 210427, 213623, 217553, 219383, 220692, 221930, 235043, 248780, 273753, 280218, 281177, 281524, 281576, 284724, 292604, 294029, 303953, 306538, 308458, 308505, 316742, 319289, 320234, 327054, 327072, 327398, 327600, 332409, 336388, 341635, 346889, 350672, 351329, 353135, 363860, 367030, 370221, 371565, 377398, 386785, 392998, 398219, 402505, 407032, 415200, 422717, 428011, 428231, 448369, 449478, 457516, 463377, 464017, 465975, 466034, 466934, 481015, 486961, 506895, 517780, 530053, 533796, 538652, 545796, 551225, 553634, 556237, 558791, 575102, 575155, 586439, 601652, 609779, 623275, 627943, 631387, 631723, 633836, 638391, 656566, 664353, 670789, 680751, 689427, 720434, 721446, 723381, 726813, 731238, 733196, 740975, 749748, 776975, 788157, 788746, 816936, 817671, 820969, 823293, 828148, 833249, 859412, 896232, 904047, 910330, 915561, 915620, 929654, 938889, 952946, 961430, 961734, 964331, 964957, 972259, 1003690, 1033439, 1034437, 1051024, 1108305, 1120176, 1131055, 1153581, 1156727, 1202435, 1203984, 1211381, 1222289, 1235202, 1262083, 1300017, 1339314, 1349036, 1359461, 1377146, 1391969, 1415681, 1447159, 1464696, 1490543, 1493537, 1501641, 1509206, 1509292, 1548136, 1549458, 1549462, 1564612, 1565130, 1576215, 1655945, 1661530, 1666872, 1677849, 1698173, 1708231, 1715612, 1757536, 1812906, 1815878, 1824209, 1826463, 1856843, 1873847, 1883302, 1893141, 1969242, 1969365, 1987761, 1995118, 2006246, 2010020, 2037683, 2047291, 2054261, 2080736, 2114868, 2118839, 2141146, 2141814, 2144207, 2146778, 2184503, 2186925, 2188875, 2194036, 2203645, 2225452, 2230862, 2233357, 2246508, 2317808, 2335062, 2343435, 2349286, 2426092, 2452501, 2453384, 2462355, 2512224, 2537990, 2562137, 2593043, 2598707, 2677959, 2720506, 2752332, 2783717, 2819761, 2820149, 2841332, 2881826, 2917959, 2948977, 2961866, 3004005, 3022534, 3092814, 3111741, 3154502, 3182967, 3208690, 3240642, 3252578, 3255658, 3271875, 3332313, 3339535, 3434461, 3615154, 3628860, 3683111, 3700362, 3792595, 3807258, 3841194, 3872147, 3883830, 3930504, 4015718, 4029573, 4059529, 4215608, 4280695, 4347183, 4351802, 4435437, 4501770, 4510565, 4641054, 4699966, 4802205, 4815300, 4926666, 5005272, 5043109, 5101536, 5128019, 5182022, 5257328, 5278961, 5343675, 5385365, 5429784, 5477377, 5478290, 5638609, 5685714, 5695154, 5857176, 6029416, 6053012, 6093586, 6112305, 6125743, 6234479, 6240007, 6243331, 6354412, 6421477, 6574396, 6581492, 6704204, 6730118, 6905653, 6944037, 6957108, 7100884, 7235762, 7258999, 7283449, 7880607, 8100083, 8240560, 8396623, 8506688, 8564084, 8605398, 8611282, 8703998, 9061407, 9078753, 9147420, 9176039, 9200556, 9497731, 9522403, 9842638, 9863941, 9906987, 10038567, 10063799, 10384584, 10387184, 10390788, 10518067, 10567235, 10653558, 10690101, 10936166, 11032244, 11316927, 11481439, 11711604, 12053604, 12102180, 12131573, 12206137, 12322014, 12370373, 12605908, 12648224, 12695418, 12745936, 12992757, 13533517, 13555100, 13583230, 13713727, 13742270, 13963740, 14167343, 14321863, 14512971, 14866750, 15439101, 15620129, 15641815, 15907326, 15915916, 15968562, 16148679, 16200012, 16260187, 16274427, 16350900, 16360616, 16569242, 16628470, 16642415, 16690475, 17029731, 17274528, 17631681, 17643617, 18425009, 18491159, 18882508, 19139981, 19187792, 19220683, 19428388, 19473940, 19498153, 19581362, 19605469, 19725188, 20020126, 20565227, 20720185, 20761206, 21281658, 21475828, 21524190, 22191031, 22345295, 23253714, 25719408, 25839411, 26393406, 28410529, 28468804, 29329674, 29825869, 30037100, 30240268, 31677555, 32707600, 33709966, 35419951, 36363685, 36855208, 37145388, 38410764, 38940203, 39377403, 39598308, 39819845, 39832843, 39840293, 39890239, 40434887, 40698579, 41110630, 41623786, 42918305, 43787823, 45269508, 45506334, 47426176, 48805326, 49286014, 49783648, 49794138, 49918891, 50696396, 51387579, 51825278, 52111764, 52329932, 52826694, 53083705, 53101632, 53188148, 54986442, 55017047, 55102119, 55126687, 56414432, 63939742, 65360866, 68410996, 69325580, 69327105, 73124158, 75344642, 77519585, 78696755, 80767612, 81133993, 82344037, 82454648, 83698936, 86997181, 88636728, 89344688, 89698852, 90361140, 90941407, 94288761, 94494238, 97023942, 100593970, 100597874, 103211094, 107152322, 114382036, 116369819, 122344662, 125188150, 128113045, 129244038, 131683356, 132570235, 137976265, 138911417, 139389402, 141720263, 143762628, 145864825, 151371569, 151581682, 152143061, 153356329, 159714387, 161801745, 162480049, 163656220, 164542053, 169033674, 172572693, 173100036, 173800143, 175277028, 175467516, 175508620, 176259451, 177234275, 177776766, 179082346, 182864549, 183800139, 184316930, 184500506, 195272599, 205387401, 208990679, 209991765, 212404674, 221786295, 227058817, 231809085, 233754083, 234215159, 241575572, 244683801, 292653561)
    //val userIds: DataStream[Long] = env.fromElements(2, 5, 6)
    //val seeds = userIds.map(x => Fetcher.fetchFriends(x))

    val result = userIds.countWindowAll(20).apply((window: GlobalWindow, ids: Iterable[Long], out: Collector[Fetch]) => {
      val all: Future[Seq[Fetch]] = Future.sequence(ids.toSeq.map(id => Fetcher.fetchFriends(id)))

      for (fetch <- Await.result(all, 6000.milliseconds)) {
        out.collect(fetch)
      }
    })

    //    val seeds = userIds.map(x => Fetcher.fetchFriends(x))
    //    val result: DataStream[String] = seeds.countWindowAll(1).apply((window: GlobalWindow, futures: Iterable[Future[Fetch]], out: Collector[String]) => {
    //      for (f<-futures){
    //        val fetch: Fetch = Await.result(f, Duration.create(10, TimeUnit.SECONDS))
    //        out.collect(fetch.uri)
    //      }
    //    })

    result.writeAsText("file:///c:\\tmp\\result.txt", WriteMode.OVERWRITE)
    //result.print()
    val startTime = System.nanoTime
    env.execute()
    val elapsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime - startTime, TimeUnit.NANOSECONDS)
    Fetcher.close()
    Thread.sleep(1000)
    println(s"elapsedTime=$elapsedTime ms")
  }

}